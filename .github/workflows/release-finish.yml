name: Merge the release branch

on:
  pull_request:
    branches:
      - v1
    types:
      - labeled

jobs:
  merge_and_tag:
    name: Merge the release branch
    if: github.event.label.name == 'bot/release/finish'
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Remove the workflow label
        if: always()
        run: gh pr edit ${{ github.event.number }} --remove-label bot/release/finish

      - uses: actions/checkout@v3

      - name: Read the version.go file
        id: version
        run: _tools/release/parse-version.sh

      - name: Configure and fetch the branches
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          
          # Fetch the tags, the PR, v1 and main branches
          git fetch --tags origin v1 main "$GITHUB_HEAD_REF"

      - name: Update the version.go file in the release branch to ${{ steps.version.outputs.current_without_rc_suffix }}
        env:
          VERSION: ${{ steps.version.outputs.current_without_rc_suffix }}
        run: |
          # Two possible cases: either version.go contains a release candidate version and it will be updated back to
          # the non-release-candidate tag, either there was no release candidate and this step will exit without error.
          git checkout "$GITHUB_HEAD_REF"
          _tools/release/update-version-file.sh $VERSION
          if git diff-index --exit-code HEAD --; then
            echo "No change to commit"
            exit 0 # no diff: the version file is unchanged and already good
          fi
          git add --all
          git commit -m "update version file to $VERSION"

      - name: Merge the release branch into the dev branch
        run: |
          git checkout main
          git merge --no-edit -m "Merge branch $GITHUB_HEAD_REF into main #${{ github.event.number }}" --no-ff "$GITHUB_HEAD_REF"

      - name: Bump the version.go file on the dev branch main to ${{ steps.version.outputs.next_minor }}
        env:
          NEXT_VERSION: ${{ steps.version.outputs.next_minor }}
        run: |
          _tools/release/update-version-file.sh $NEXT_VERSION
          git add --all
          git commit -m "update version file to $NEXT_VERSION"

      - name: Merge the PR into the stable branch v1
        run: |
          git checkout v1
          git merge --no-edit -m "Merge branch $GITHUB_HEAD_REF into v1 #${{ github.event.number }}" --no-ff "$GITHUB_HEAD_REF"

      - name: Create the git tag ${{ steps.version.outputs.current_without_rc_suffix }}
        run: git tag ${{ steps.version.outputs.current_without_rc_suffix }}

      - name: Push the branches and tag
        run: |
          # Push the branches and delete the release branch
          # Note the order is intentional here in order to avoid pushing the tag or the release in the main branch merge
          # fails
          git push origin main # can fail if a new commit happened upstream meanwhile - the workflow should be re-executed
          git push origin v1 # should never fail because the v1 is used by one release at a time
          git push origin ":$GITHUB_HEAD_REF" # remove the branch
          git push --tags origin # push the tag 

      - name: Add a PR comment
        if: success()
        run: |
          gh pr comment ${{ github.event.number }} -F - <<EOF
          :tada: Congratulations, the release branch was successfully merged
          and tagged with ${{ steps.version.outputs.version }}.
          EOF
